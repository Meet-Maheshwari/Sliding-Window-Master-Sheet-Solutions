class Solution {
public:
    int numberOfNiceArrays(vector<int>& nums, int k) {
        if(k < 0) return 0;
        int l = 0, r = 0, cnt = 0, sum = 0;

        while(r < nums.size()) {
            sum += nums[r];

            while(sum > k) {
                sum -= nums[l];
                l++;
            }

            cnt = cnt + (r - l + 1);
            r++;
        }
        return cnt;
    }

    int numberOfSubarrays(vector<int>& nums, int k) {
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] % 2 == 0) nums[i] = 0;
            else nums[i] = 1;
        }

        int ans1 = numberOfNiceArrays(nums, k);
        int ans2 = numberOfNiceArrays(nums, k-1);

        return ans1 - ans2;
    }
};


🔹 LeetCode 1248 – Count Number of Nice Subarrays
This problem asks to count the number of subarrays that contain exactly k odd numbers.

✅ Approach:

Convert the input array so that each element is either:

1 if the element is odd,

0 if the element is even.

The problem then reduces to counting subarrays with sum exactly k (where sum is count of odd numbers).

We use the same sliding window technique as in the previous problem:

numberOfNiceArrays(nums, k) counts the number of subarrays with sum at most k.

To find the number of subarrays with sum exactly k, subtract:

numberOfNiceArrays(nums, k) - numberOfNiceArrays(nums, k-1)
Inside numberOfNiceArrays, use two pointers to maintain a window with sum ≤ k.

Expand the right pointer and add to the sum.

If sum exceeds k, move the left pointer to reduce the sum.

Count the number of valid subarrays ending at r as (r - l + 1).

✅ Key Points:

Transformation of the original array simplifies counting odd elements.

Sliding window works efficiently because the array now contains only 0’s and 1’s.

Time Complexity: O(n) — each element is visited at most twice.

Space Complexity: O(1) additional space.

🧑‍💻 This method can be easily translated to other programming languages using the same logic.